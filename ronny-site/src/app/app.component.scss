ion-menu ion-content {
  --background: var(--ion-item-background, var(--ion-background-color, #fff));
}

ion-menu.md ion-content {
  --padding-start: 8px;
  --padding-end: 8px;
  --padding-top: 20px;
  --padding-bottom: 20px;
}

ion-menu.md ion-list {
  padding: 20px 0;
}

ion-menu.md ion-note {
  margin-bottom: 30px;
}

ion-menu.md ion-list-header,
ion-menu.md ion-note {
  padding-left: 10px;
}

ion-menu.md ion-list#inbox-list {
  border-bottom: 1px solid var(--ion-color-step-150, #d7d8da);
}

ion-menu.md ion-list#inbox-list ion-list-header {
  font-size: 22px;
  font-weight: 600;

  min-height: 20px;
}

ion-menu.md ion-list#labels-list ion-list-header {
  font-size: 16px;

  margin-bottom: 18px;

  color: #757575;

  min-height: 26px;
}

ion-menu.md ion-item {
  --padding-start: 10px;
  --padding-end: 10px;
  border-radius: 4px;
}

ion-menu.md ion-item.selected {
  --background: rgba(var(--ion-color-primary-rgb), 0.14);
}

ion-menu.md ion-item.selected ion-icon {
  color: var(--ion-color-primary);
}

ion-menu.md ion-item ion-icon {
  color: #616e7e;
}

ion-menu.md ion-item ion-label {
  font-weight: 500;
}

ion-menu.ios ion-content {
  --padding-bottom: 20px;
}

ion-menu.ios ion-list {
  padding: 20px 0 0 0;
}

ion-menu.ios ion-note {
  line-height: 24px;
  margin-bottom: 20px;
}

ion-menu.ios ion-item {
  --padding-start: 16px;
  --padding-end: 16px;
  --min-height: 50px;
}

ion-menu.ios ion-item.selected ion-icon {
  color: var(--ion-color-primary);
}

ion-menu.ios ion-item ion-icon {
  font-size: 24px;
  color: #73849a;
}

ion-menu.ios ion-list#labels-list ion-list-header {
  margin-bottom: 8px;
}

ion-menu.ios ion-list-header,
ion-menu.ios ion-note {
  padding-left: 16px;
  padding-right: 16px;
}

ion-menu.ios ion-note {
  margin-bottom: 8px;
}

ion-note {
  display: inline-block;
  font-size: 16px;

  color: var(--ion-color-medium-shade);
}

ion-item.selected {
  --color: var(--ion-color-primary);
}

.desktop-nav-buttons {
  margin-left: 20px;
}
.desktop-nav-button {
  color: white;
  border-bottom: none;
  transition: border-bottom 0.25s;
}
.desktop-nav-button.active{
  border-bottom: 2px solid rgb(28, 233, 35);
  transition: border-bottom 0.25s;
}
a {
  text-decoration: none;
}

// src and adapted from: https://codepen.io/cipherbeta/pen/YLdVjw
@mixin glitchCopy { 
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch {
position: relative;
animation: glitch-skew 1s infinite linear alternate-reverse;

// Creates a copy before our text. 
&::before{
  // Duplicates our text with the mixin.
  @include glitchCopy;
  // Scoots text slightly to the left for the color offset.
  left: 2px;
  // Creates the color 'shadow' that happens on the glitch.
  text-shadow: -2px 0 #c22424;
  /* Creates an initial clip for our glitch. This works in
  a typical top,right,bottom,left fashion and creates a mask
  to only show a certain part of the glitch at a time. */
  clip: rect(44px, 450px, 56px, 0);
  /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
  with an alternating animation to keep things fresh. */
  animation: glitch-anim 5s infinite linear alternate-reverse;
}

// Creates a copy after our text. Note comments from ::before.
&::after {
  @include glitchCopy;
  left: -2px;
  text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
  animation: glitch-anim2 1s infinite linear alternate-reverse;
}
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
$steps: 10;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    transform: skew((random(10) - 5) + deg);
  }
}
}
.white {
  color: white;
}
#mu-img {
  transition: all 0.3s;
  border: none;
  margin: 5px 10px 5px 5px;
}
#mu-img:hover {
  transition: all 0.3s;
  border: 2px solid #F1B82D;
  background-color: rgba(255,255,255,1);
}

#faculty-link {
  transition: all 0.2s;
  position: relative;
}
#faculty-h3:hover {
  &:after {
    content : "Mizzou Engineering";
    color: white;
    font-size: 0.5em;
    text-align: end;
    position:absolute;
    left: 0;
    top: 0;
    overflow-x: visible;
    overflow-y:hidden;
    white-space: nowrap;
    border-top: 2px solid #F1B82D;
    margin-top: 2.3em; /*move the border below the text*/
    animation-name: faculty-link-border;
    animation-timing-function: ease-out;
    animation-duration: 1s;
    animation-direction:normal;
    animation-fill-mode: forwards;
  }
}
@keyframes faculty-link-border {
  from {width: 0%; opacity: 0}
  to {width: 100%; opacity: 1}
}
@keyframes faculty-link-border-out {
  from {width: 100%; opacity: 1}
  to {width: 0%; opacity: 0}
}
#faculty-h3 {
  margin-bottom: 0 !important;
  margin-top: 0 !important;
  padding-bottom: 0;
  transition: padding-bottom 0.25s;
  position: relative;
}
#faculty-h3:hover {
  padding-bottom: 16px;
  transition: padding-bottom 0.3s;
}